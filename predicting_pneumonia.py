# -*- coding: utf-8 -*-
"""Predicting_Pneumonia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J8BA1So8k27zDLWqouo8P3NK0dacLOC0
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import Model
from keras.layers import Input, concatenate, Activation, Dropout, Flatten, Dense
from keras.layers.convolutional import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers import BatchNormalization

from keras import backend as K
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras_preprocessing import image
from keras.regularizers import Regularizer
import numpy as np

import pandas as pd
import sys
import json
import os
import sklearn.metrics as metrics
import keras.callbacks as callbacks
import keras.utils.np_utils as kutils
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import SGD
from keras.callbacks import LearningRateScheduler
import matplotlib.pyplot as plt
import keras

"""# New section"""

Image_size = [224,224]

train_path = '/content/drive/MyDrive/Image_data/Dataset/chest_xray/train'
test_path = '/content/drive/MyDrive/Image_data/Dataset/chest_xray/test'
val_path = '/content/drive/MyDrive/Image_data/Dataset/chest_xray/val'

import seaborn as sns
from glob import  glob

# Use the Image Data Generator to import the images from the dataset
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

train_set = train_datagen.flow_from_directory(train_path,target_size=(224,224),batch_size=32,class_mode='categorical')







normal = [img for img in glob('/content/drive/MyDrive/Image_data/Dataset/chest_xray/train/NORMAL/*')]

for i in normal[0:5]:
  im = plt.imread(i)
  plt.figure(figsize=(15,20))
  plt.title('Normal',color='green',size=14)
  plt.imshow(im)
  plt.show()

pnemonia = [img for img in glob('/content/drive/MyDrive/Image_data/Dataset/chest_xray/train/PNEUMONIA/*')]

for i in pnemonia[0:5]:
  im = plt.imread(i)
  plt.figure(figsize=(15,20))
  plt.title('Pneumonia',color='green',size=14)
  plt.imshow(im)
  plt.show()

vgg16 = VGG16(input_shape=Image_size+[3], weights='imagenet',include_top=False)

for layer in vgg16.layers:
  layer.trainable = False

x = Flatten()(vgg16.output)
x = Flatten()(x)
x = Dense(2024,activation='relu')(x)

prediction = Dense(2,activation='softmax')(x)

model = Model(inputs=vgg16.input, outputs = prediction)

model.summary(
    
)

from tensorflow.keras.optimizers import Adam

adam = Adam(learning_rate=0.001)

model.compile(optimizer=adam,loss='categorical_crossentropy',
              metrics=['accuracy'])

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale= 1/255.0)

train_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Image_data/Dataset/chest_xray/train',target_size=(224,224),class_mode='categorical',batch_size=32)

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Image_data/Dataset/chest_xray/test',target_size=(224,224),class_mode='categorical',batch_size=32)

hist = model.fit_generator(train_set,steps_per_epoch=len(train_set),epochs=5,verbose=1
                           , validation_data=test_set,validation_steps=len(test_set))

plt.plot(hist.history['accuracy']  ,label = 'Train_accuracy')
plt.plot(hist.history['val_accuracy'], label='val acc')
plt.legend()
plt.show
plt.savefig('Training score acc')

plt.plot(hist.history['loss'], label='loss')
plt.plot(hist.history['val_loss'] ,label='val loss')
plt.legend()
plt.show
plt.savefig('Training loss val')

from keras.models import load_model

model.save('/content/drive/MyDrive/Image_data/Dataset/Model_Vgg16.h5')



"""Validatation """

model = load_model('/content/drive/MyDrive/Image_data/Dataset/Model_Vgg16.h5')

img = image.load_img('/content/drive/MyDrive/Image_data/Dataset/chest_xray/val/NORMAL/NORMAL2-IM-1440-0001.jpeg',target_size=(224,224))

x = image.img_to_array(img)

x = np.expand_dims(x, axis=0)
from keras.applications.vgg16 import preprocess_input

imag = preprocess_input(x)

classes = model.predict(imag)

print(classes)

img = image.load_img('/content/drive/MyDrive/Image_data/Dataset/chest_xray/val/PNEUMONIA/person1947_bacteria_4876.jpeg',target_size=(224,224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
imag = preprocess_input(x)
classes = model.predict(imag)
c =  np.argmax(classes)
print(c)

img = image.load_img('/content/drive/MyDrive/Image_data/Dataset/chest_xray/val/NORMAL/NORMAL2-IM-1438-0001.jpeg',target_size=(224,224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
imag = preprocess_input(x)
classes = model.predict(imag)
c =  np.argmax(classes)
print(c)

os.path.join('/content/drive/MyDrive/Feluda','/content/Model_Vgg16.h5')

os.path.join('/content/drive/MyDrive/Feluda','/content/Training loss val.png')
os.path.join('/content/drive/MyDrive/Feluda','/content/Training score acc.png')

!zip -r model.zip {'/content/Model_Vgg16.h5'}

try:
  from google.colab import files
  files.download('./model.zip')
except ImportError:
  pass

print( os.getcwd() )

os.path.join('./result')

!pip show tensorflow

